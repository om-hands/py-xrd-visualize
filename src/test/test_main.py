import traceback
import numpy as np
from src.visualize import visualize
from typing import Callable, Tuple, List, Literal
from matplotlib.ticker import MultipleLocator
import io

def Test_arrange_dummy():
    xys = list(map(visualize.read_file_dummy, ["dummysine"]))
    visualize.arrange_row(
        xys=xys,
        range=(0.0, 2 * np.pi),
        
        xlabel=r"$2\theta[°]$",
        ylabel=r"$Intensity[arb. unit]$",
        
        yscale="linear",
        title="dummysine"
    )


def test_arrange_dummy_nth(n: int):
    xys = list(map(visualize.read_file_dummy, ["dummysine"] * n))
    visualize.arrange_row(
        xys=xys,
        range=(0.0, 2 * np.pi),
        xlabel=r"$2\theta[°]$",
        ylabel=r"$Intensity[arb. unit]$",
        title="dummysine*n",
        
        yscale="linear"
    )


def Test_arrange_dummy_nth():
    test_arrange_dummy_nth(5)


def Test_arrange_rawdata():

    xys = list(map(visualize.read_xy, ["src/test/test.xy"]))
    visualize.arrange_row(
        xys=xys,
        range=(38.2, 39.0),
        xlabel=r"$2\theta[°]$",
        ylabel=r"$Intensity[arb. unit]$",
        title="test.xy",
        ymax=50,
        yscale="log",
    )


def test_arrange_rawdata_nth(n: int):

    xys = list(map(visualize.read_xy, ["src/test/test.xy"] * n))
    visualize.arrange_row(
        xys=xys,
        range=(38.2, 39),
        xlabel=r"$2\theta[°]$",
        ylabel=r"$Intensity[arb. unit]$",
        title="test.xy*n",
        ymax=50,
        yscale="log",
    )

def Test_arrange_rawdata2():
    data="""30.0000	15.0000
30.0100	13.0000
30.0200	19.0000
30.0300	10.0000
30.0400	15.0000
30.0500	16.0000
30.0600	14.0000
30.0700	24.0000
30.0800	8.0000
30.0900	15.0000
30.1000	9.0000
30.1100	11.0000
30.1200	12.0000
30.1300	8.0000
30.1400	19.0000
30.1500	12.0000
30.1600	10.0000
30.1700	12.0000
30.1800	13.0000
30.1900	24.0000
30.2000	17.0000
30.2100	18.0000
30.2200	13.0000
30.2300	18.0000
30.2400	13.0000
30.2500	17.0000
30.2600	16.0000
30.2700	12.0000
30.2800	18.0000
30.2900	15.0000
30.3000	15.0000
30.3100	18.0000
30.3200	16.0000
30.3300	19.0000
30.3400	19.0000
30.3500	15.0000
30.3600	19.0000
30.3700	10.0000
30.3800	15.0000
30.3900	15.0000
30.4000	14.0000
30.4100	17.0000
30.4200	9.0000
30.4300	10.0000
30.4400	15.0000
30.4500	17.0000
30.4600	12.0000
30.4700	14.0000
30.4800	17.0000
30.4900	13.0000
30.5000	20.0000
30.5100	18.0000
30.5200	21.0000
30.5300	14.0000
30.5400	13.0000
30.5500	12.0000
30.5600	13.0000
30.5700	17.0000
30.5800	13.0000
30.5900	15.0000
30.6000	12.0000
30.6100	15.0000
30.6200	11.0000
30.6300	24.0000
30.6400	17.0000
30.6500	15.0000
30.6600	11.0000
30.6700	14.0000
30.6800	25.0000
30.6900	16.0000
30.7000	9.0000
30.7100	16.0000
30.7200	12.0000
30.7300	14.0000
30.7400	16.0000
30.7500	13.0000
30.7600	15.0000
30.7700	17.0000
30.7800	15.0000
30.7900	13.0000
30.8000	13.0000
30.8100	18.0000
30.8200	14.0000
30.8300	23.0000
30.8400	19.0000
30.8500	16.0000
30.8600	17.0000
30.8700	18.0000
30.8800	16.0000
30.8900	14.0000
30.9000	17.0000
30.9100	16.0000
30.9200	10.0000
30.9300	14.0000
30.9400	18.0000
30.9500	16.0000
30.9600	11.0000
30.9700	14.0000
30.9800	16.0000
30.9900	21.0000
31.0000	13.0000
31.0100	11.0000
31.0200	6.0000
31.0300	20.0000
31.0400	15.0000
31.0500	13.0000
31.0600	11.0000
31.0700	9.0000
31.0800	6.0000
31.0900	11.0000
31.1000	10.0000
31.1100	20.0000
31.1200	15.0000
31.1300	12.0000
31.1400	16.0000
31.1500	20.0000
31.1600	15.0000
31.1700	21.0000
31.1800	14.0000
31.1900	16.0000
31.2000	11.0000
31.2100	17.0000
31.2200	19.0000
31.2300	12.0000
31.2400	9.0000
31.2500	14.0000
31.2600	12.0000
31.2700	17.0000
31.2800	20.0000
31.2900	13.0000
31.3000	17.0000
31.3100	19.0000
31.3200	13.0000
31.3300	16.0000
31.3400	9.0000
31.3500	11.0000
31.3600	9.0000
31.3700	16.0000
31.3800	12.0000
31.3900	22.0000
31.4000	10.0000
31.4100	10.0000
31.4200	12.0000
31.4300	16.0000
31.4400	21.0000
31.4500	20.0000
31.4600	13.0000
31.4700	19.0000
31.4800	15.0000
31.4900	13.0000
31.5000	16.0000
31.5100	15.0000
31.5200	12.0000
31.5300	16.0000
31.5400	14.0000
31.5500	23.0000
31.5600	12.0000
31.5700	14.0000
31.5800	17.0000
31.5900	14.0000
31.6000	15.0000
31.6100	16.0000
31.6200	8.0000
31.6300	8.0000
31.6400	10.0000
31.6500	14.0000
31.6600	15.0000
31.6700	11.0000
31.6800	7.0000
31.6900	21.0000
31.7000	11.0000
31.7100	21.0000
31.7200	17.0000
31.7300	15.0000
31.7400	13.0000
31.7500	14.0000
31.7600	14.0000
31.7700	14.0000
31.7800	16.0000
31.7900	14.0000
31.8000	18.0000
31.8100	8.0000
31.8200	8.0000
31.8300	14.0000
31.8400	17.0000
31.8500	14.0000
31.8600	15.0000
31.8700	13.0000
31.8800	16.0000
31.8900	14.0000
31.9000	14.0000
31.9100	14.0000
31.9200	11.0000
31.9300	11.0000
31.9400	16.0000
31.9500	20.0000
31.9600	22.0000
31.9700	8.0000
31.9800	11.0000
31.9900	16.0000
32.0000	22.0000
32.0100	24.0000
32.0200	10.0000
32.0300	12.0000
32.0400	17.0000
32.0500	22.0000
32.0600	16.0000
32.0700	14.0000
32.0800	14.0000
32.0900	12.0000
32.1000	20.0000
32.1100	7.0000
32.1200	21.0000
32.1300	16.0000
32.1400	13.0000
32.1500	13.0000
32.1600	16.0000
32.1700	17.0000
32.1800	12.0000
32.1900	14.0000
32.2000	13.0000
32.2100	13.0000
32.2200	8.0000
32.2300	21.0000
32.2400	12.0000
32.2500	14.0000
32.2600	10.0000
32.2700	21.0000
32.2800	13.0000
32.2900	13.0000
32.3000	13.0000
32.3100	14.0000
32.3200	18.0000
32.3300	16.0000
32.3400	16.0000
32.3500	16.0000
32.3600	17.0000
32.3700	12.0000
32.3800	19.0000
32.3900	11.0000
32.4000	18.0000
32.4100	25.0000
32.4200	13.0000
32.4300	14.0000
32.4400	17.0000
32.4500	15.0000
32.4600	6.0000
32.4700	9.0000
32.4800	11.0000
32.4900	12.0000
32.5000	14.0000"""
    data=io.StringIO(data)
    xys = list(map(visualize.read_xy, [data]))
    visualize.arrange_row(
        xys=xys,
        range=(30.0, 32.5),
        xlabel=r"$2\theta[°]$",
        ylabel=r"$Intensity[arb. unit]$",
        title="test.xy",
        ymax=50,
        ymin=1,
        manual_locater=MultipleLocator(0.2),
        yscale="log",
    )

def Test_arrange_rawdata_nth():
    test_arrange_rawdata_nth(5)


def main():
    visualize.parameter()
    for k_attrname, v_attr_obj in globals().items():
        if k_attrname.startswith("Test") and callable(v_attr_obj):
            try:
                v_attr_obj()
            except TypeError as e:
                print("{k_attrname} start with 'Test' but need argument")
                traceback.print_exception(e)


if __name__ == "__main__":
    main()
